
import base64
import marshal

# Dữ liệu mã hóa base64
encoded_data = b''
# Giải mã và thực thi
decoded_data = base64.b64decode(encoded_data)
script_data = marshal.loads(decoded_data)

# Thực thi mã nguồn
exec(script_data)
